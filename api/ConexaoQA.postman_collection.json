{
	"info": {
		"_postman_id": "ab0ae4e5-79f1-495e-9179-235c2423dbad",
		"name": "ConexaoQA",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "CTs success",
					"item": [
						{
							"name": "user by token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"_id\": \"60dff86f0924fc0015057bd6\",\r",
											"            \"name\": \"Emanuele\",\r",
											"            \"email\": \"emanuele5@gmail.com\",\r",
											"            \"avatar\": \"//www.gravatar.com/avatar/6e539d5a021ae2ce883c15f72cb60238?s=200&r=pg&d=mm\",\r",
											"            \"date\": \"2021-07-03T05:41:03.615Z\",\r",
											"            \"__v\": 0\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"_id\",\r",
											"        \"name\",\r",
											"        \"email\",\r",
											"        \"avatar\",\r",
											"        \"date\",\r",
											"        \"__v\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"_id\": {\r",
											"            \"$id\": \"#/properties/_id\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The _id schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"60dff86f0924fc0015057bd6\"\r",
											"            ]\r",
											"        },\r",
											"        \"name\": {\r",
											"            \"$id\": \"#/properties/name\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The name schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"Emanuele\"\r",
											"            ]\r",
											"        },\r",
											"        \"email\": {\r",
											"            \"$id\": \"#/properties/email\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The email schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"emanuele5@gmail.com\"\r",
											"            ]\r",
											"        },\r",
											"        \"avatar\": {\r",
											"            \"$id\": \"#/properties/avatar\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The avatar schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"//www.gravatar.com/avatar/6e539d5a021ae2ce883c15f72cb60238?s=200&r=pg&d=mm\"\r",
											"            ]\r",
											"        },\r",
											"        \"date\": {\r",
											"            \"$id\": \"#/properties/date\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The date schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"2021-07-03T05:41:03.615Z\"\r",
											"            ]\r",
											"        },\r",
											"        \"__v\": {\r",
											"            \"$id\": \"#/properties/__v\",\r",
											"            \"type\": \"integer\",\r",
											"            \"title\": \"The __v schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": 0,\r",
											"            \"examples\": [\r",
											"                0\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - User by token', () => {\r",
											"\r",
											"    it(\"Status code should be '200 OK'\", () => {\r",
											"        response.should.have.status(200)\r",
											"        pm.response.to.have.status(\"OK\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.ok\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"email should exists and be a string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('email')\r",
											"        pm.expect(jsonData.email).to.be.a('string')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "jwt",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "login success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjBkZmY4NmYwOTI0ZmMwMDE1MDU3YmQ2In0sImlhdCI6MTYyNTI5MTU4MywiZXhwIjoxNjI1Mjk1MTgzfQ.bfs9eipxoboQdC7KNXvF1NVI6RtcYO2ve-86VCnjKn0\"\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"jwt\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"jwt\": {\r",
											"            \"$id\": \"#/properties/jwt\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The jwt schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjBkZmY4NmYwOTI0ZmMwMDE1MDU3YmQ2In0sImlhdCI6MTYyNTI5MTU4MywiZXhwIjoxNjI1Mjk1MTgzfQ.bfs9eipxoboQdC7KNXvF1NVI6RtcYO2ve-86VCnjKn0\"\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Token válido do usuário', () => {\r",
											"\r",
											"    it(\"Status code should be '200 OK'\", () => {\r",
											"        response.should.have.status(200)\r",
											"        pm.response.to.have.status(\"OK\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.nested\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"JWT should exists and be a string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('jwt')\r",
											"        pm.expect(jsonData.jwt).to.be.a('string')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"    pm.environment.set(\"token\", jsonData.jwt)\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"emanuele5@gmail.com\",\r\n    \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CTs  exceptions",
					"item": [
						{
							"name": "credenciais inválidas",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Credenciais inválidas\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Credenciais inválidas\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Credenciais inválidas\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Credenciais inválidas\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Credenciais inválidas', () => {\r",
											"\r",
											"    it(\"Status code should be '401 Unauthorized'\", () => {\r",
											"        response.should.have.status(401)\r",
											"        pm.response.to.have.status(\"Unauthorized\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.unauthorized\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Errors should exists and be an array\", () => {\r",
											"        pm.expect(jsonData).to.have.property('errors')\r",
											"        pm.expect(jsonData.errors).to.be.a('array')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Credenciais inválidas'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[0].msg).to.be.a('string')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"aaaa@a.com\",\r\n  \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "senha obrigatória",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Senha é obrigatória\",\r",
											"                    \"param\": \"password\",\r",
											"                    \"location\": \"body\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Senha é obrigatória\",\r",
											"                        \"param\": \"password\",\r",
											"                        \"location\": \"body\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Senha é obrigatória\",\r",
											"                                \"param\": \"password\",\r",
											"                                \"location\": \"body\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\",\r",
											"                            \"param\",\r",
											"                            \"location\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Senha é obrigatória\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"param\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/param\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The param schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"password\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"location\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/location\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The location schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"body\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Senha obrigatória', () => {\r",
											"\r",
											"    it(\"Status code should be '400 Bad Request'\", () => {\r",
											"        response.should.have.status(400)\r",
											"        pm.response.to.have.status(\"Bad Request\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.badRequest\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Errors should exists and be an array\", () => {\r",
											"        pm.expect(jsonData).to.have.property('errors')\r",
											"        pm.expect(jsonData.errors).to.be.a('array')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Senha é obrigatória'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[0].msg).to.be.equal('Senha é obrigatória')\r",
											"    })\r",
											"\r",
											"    it(\"Param should exists and be equal 'password'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('param')\r",
											"        pm.expect(jsonData.errors[0].param).to.be.equal('password')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"aaaa@a.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "email obrigatório",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Por favor inclua um email válido\",\r",
											"                    \"param\": \"email\",\r",
											"                    \"location\": \"body\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Por favor inclua um email válido\",\r",
											"                        \"param\": \"email\",\r",
											"                        \"location\": \"body\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Por favor inclua um email válido\",\r",
											"                                \"param\": \"email\",\r",
											"                                \"location\": \"body\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\",\r",
											"                            \"param\",\r",
											"                            \"location\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Por favor inclua um email válido\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"param\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/param\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The param schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"email\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"location\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/location\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The location schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"body\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Email obrigatório', () => {\r",
											"\r",
											"    it(\"Status code should be '400 Bad Request'\", () => {\r",
											"        response.should.have.status(400)\r",
											"        pm.response.to.have.status(\"Bad Request\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.badRequest\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Errors should exists and be an array\", () => {\r",
											"        pm.expect(jsonData).to.have.property('errors')\r",
											"        pm.expect(jsonData.errors).to.be.a('array')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Por favor inclua um email válido'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[0].msg).to.be.equal('Por favor inclua um email válido')\r",
											"    })\r",
											"\r",
											"    it(\"Param should exists and be equal 'email'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('param')\r",
											"        pm.expect(jsonData.errors[0].param).to.be.equal('email')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"password\": \"123456\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "body vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Por favor inclua um email válido\",\r",
											"                    \"param\": \"email\",\r",
											"                    \"location\": \"body\"\r",
											"                },\r",
											"                {\r",
											"                    \"msg\": \"Senha é obrigatória\",\r",
											"                    \"param\": \"password\",\r",
											"                    \"location\": \"body\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Por favor inclua um email válido\",\r",
											"                        \"param\": \"email\",\r",
											"                        \"location\": \"body\"\r",
											"                    },\r",
											"                    {\r",
											"                        \"msg\": \"Senha é obrigatória\",\r",
											"                        \"param\": \"password\",\r",
											"                        \"location\": \"body\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Por favor inclua um email válido\",\r",
											"                                \"param\": \"email\",\r",
											"                                \"location\": \"body\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\",\r",
											"                            \"param\",\r",
											"                            \"location\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Por favor inclua um email válido\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"param\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/param\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The param schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"email\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"location\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/location\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The location schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"body\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Body vazio', () => {\r",
											"\r",
											"    it(\"Status code should be '400 Bad Request'\", () => {\r",
											"        response.should.have.status(400)\r",
											"        pm.response.to.have.status(\"Bad Request\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.badRequest\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Errors should exists and be an array\", () => {\r",
											"        pm.expect(jsonData).to.have.property('errors')\r",
											"        pm.expect(jsonData.errors).to.be.a('array')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Por favor inclua um email válido'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[0].msg).to.be.equal('Por favor inclua um email válido')\r",
											"    })\r",
											"\r",
											"    it(\"Param should exists and be equal 'email'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('param')\r",
											"        pm.expect(jsonData.errors[0].param).to.be.equal('email')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Senha é obrigatória'\", () => {\r",
											"        pm.expect(jsonData.errors[1]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[1].msg).to.be.equal('Senha é obrigatória')\r",
											"    })\r",
											"\r",
											"    it(\"Param should exists and be equal 'password'\", () => {\r",
											"        pm.expect(jsonData.errors[1]).to.have.property('param')\r",
											"        pm.expect(jsonData.errors[1].param).to.be.equal('password')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "invalid token - ver p limpar cookies",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Token não existente, autorização negada\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Token não existente, autorização negada\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Token não existente, autorização negada\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Token não existente, autorização negada\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Invalid token', () => {\r",
											"\r",
											"    it(\"Status code should be '401 Unauthorized'\", () => {\r",
											"        response.should.have.status(401)\r",
											"        pm.response.to.have.status(\"Unauthorized\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.unauthorized\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Errors should exists and be an array\", () => {\r",
											"        pm.expect(jsonData).to.have.property('errors')\r",
											"        pm.expect(jsonData.errors).to.be.a('array')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Token não existente, autorização negada'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[0].msg).to.be.equal('Token não existente, autorização negada')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const jar = pm.cookies.jar();\r",
											"\r",
											"jar.clear(pm.request.url, 'token', function (error) {\r",
											"    if (error)\r",
											"        console.error(error);\r",
											"    console.log(jar)\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "jwt",
										"value": "{{invalid_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/auth",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"auth"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "CTs success",
					"item": [
						{
							"name": "create user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjBkZmYyZTkwOTI0ZmMwMDE1MDU3YmMyIn0sImlhdCI6MTYyNTI4OTQ0OSwiZXhwIjoxNjI1MjkzMDQ5fQ.dnwe_S--5RSQRKzDjknAmsyg2XLxUMZbB0SqwpWVXIM\"\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"jwt\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"jwt\": {\r",
											"            \"$id\": \"#/properties/jwt\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The jwt schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjBkZmYyZTkwOTI0ZmMwMDE1MDU3YmMyIn0sImlhdCI6MTYyNTI4OTQ0OSwiZXhwIjoxNjI1MjkzMDQ5fQ.dnwe_S--5RSQRKzDjknAmsyg2XLxUMZbB0SqwpWVXIM\"\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Create User', () => {\r",
											"\r",
											"    it(\"Status code should be '201 Created'\", () => {\r",
											"        response.should.have.status(201)\r",
											"        pm.response.to.have.status(\"Created\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.nested\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"JWT should exists and be a string\", () => {\r",
											"        pm.expect(jsonData).to.have.property('jwt')\r",
											"        pm.expect(jsonData.jwt).to.be.a('string')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"    pm.environment.set(\"token\", jsonData.jwt)\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Emanuele\",\r\n  \"email\": \"emanuele15@gmail.com\",\r\n  \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "user já registrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Usuário já registrado\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Usuário já registrado\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Usuário já registrado\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Usuário já registrado\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - User já registrado', () => {\r",
											"\r",
											"    it(\"Status code should be '400 Bad Request'\", () => {\r",
											"        response.should.have.status(400)\r",
											"        pm.response.to.have.status(\"Bad Request\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.badRequest\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Errors should exists and be an array\", () => {\r",
											"        pm.expect(jsonData).to.have.property('errors')\r",
											"        pm.expect(jsonData.errors).to.be.a('array')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Usuário já registrado'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[0].msg).to.be.equal('Usuário já registrado')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Emanuele\",\r\n  \"email\": \"emanuele3@gmail.com\",\r\n  \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CTs exceptions",
					"item": [
						{
							"name": "email obrigatório",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Por favor inclua um email válido\",\r",
											"                    \"param\": \"email\",\r",
											"                    \"location\": \"body\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Por favor inclua um email válido\",\r",
											"                        \"param\": \"email\",\r",
											"                        \"location\": \"body\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Por favor inclua um email válido\",\r",
											"                                \"param\": \"email\",\r",
											"                                \"location\": \"body\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\",\r",
											"                            \"param\",\r",
											"                            \"location\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Por favor inclua um email válido\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"param\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/param\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The param schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"email\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"location\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/location\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The location schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"body\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Email obrigatório', () => {\r",
											"\r",
											"    it(\"Status code should be '400 Bad Request'\", () => {\r",
											"        response.should.have.status(400)\r",
											"        pm.response.to.have.status(\"Bad Request\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.badRequest\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Errors should exists and be an array\", () => {\r",
											"        pm.expect(jsonData).to.have.property('errors')\r",
											"        pm.expect(jsonData.errors).to.be.a('array')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Por favor inclua um email válido'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[0].msg).to.be.equal('Por favor inclua um email válido')\r",
											"    })\r",
											"\r",
											"    it(\"Param should exists and be equal 'email'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('param')\r",
											"        pm.expect(jsonData.errors[0].param).to.be.equal('email')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"name\": \"Emanuele\",\r\n  \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "nome obrigatório",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Nome é obrigatório\",\r",
											"                    \"param\": \"name\",\r",
											"                    \"location\": \"body\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Nome é obrigatório\",\r",
											"                        \"param\": \"name\",\r",
											"                        \"location\": \"body\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Nome é obrigatório\",\r",
											"                                \"param\": \"name\",\r",
											"                                \"location\": \"body\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\",\r",
											"                            \"param\",\r",
											"                            \"location\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Nome é obrigatório\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"param\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/param\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The param schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"name\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"location\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/location\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The location schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"body\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Nome obrigatório', () => {\r",
											"\r",
											"    it(\"Status code should be '400 Bad Request'\", () => {\r",
											"        response.should.have.status(400)\r",
											"        pm.response.to.have.status(\"Bad Request\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.badRequest\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Errors should exists and be an array\", () => {\r",
											"        pm.expect(jsonData).to.have.property('errors')\r",
											"        pm.expect(jsonData.errors).to.be.a('array')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Nome é obrigatório'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[0].msg).to.be.equal('Nome é obrigatório')\r",
											"    })\r",
											"\r",
											"    it(\"Param should exists and be equal 'name'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('param')\r",
											"        pm.expect(jsonData.errors[0].param).to.be.equal('name')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"emanuele3@gmail.com\",\r\n  \"password\": \"12345678\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "body vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Por favor inclua um email válido\",\r",
											"                    \"param\": \"email\",\r",
											"                    \"location\": \"body\"\r",
											"                },\r",
											"                {\r",
											"                    \"msg\": \"Senha é obrigatória\",\r",
											"                    \"param\": \"password\",\r",
											"                    \"location\": \"body\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Por favor inclua um email válido\",\r",
											"                        \"param\": \"email\",\r",
											"                        \"location\": \"body\"\r",
											"                    },\r",
											"                    {\r",
											"                        \"msg\": \"Senha é obrigatória\",\r",
											"                        \"param\": \"password\",\r",
											"                        \"location\": \"body\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Por favor inclua um email válido\",\r",
											"                                \"param\": \"email\",\r",
											"                                \"location\": \"body\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\",\r",
											"                            \"param\",\r",
											"                            \"location\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Por favor inclua um email válido\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"param\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/param\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The param schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"email\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"location\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/location\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The location schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"body\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Body vazio', () => {\r",
											"\r",
											"    it(\"Status code should be '400 Bad Request'\", () => {\r",
											"        response.should.have.status(400)\r",
											"        pm.response.to.have.status(\"Bad Request\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.badRequest\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Errors should exists and be an array\", () => {\r",
											"        pm.expect(jsonData).to.have.property('errors')\r",
											"        pm.expect(jsonData.errors).to.be.a('array')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Nome é obrigatório'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[0].msg).to.be.equal('Nome é obrigatório')\r",
											"    })\r",
											"\r",
											"    it(\"Param should exists and be equal 'name'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('param')\r",
											"        pm.expect(jsonData.errors[0].param).to.be.equal('name')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Por favor inclua um email válido'\", () => {\r",
											"        pm.expect(jsonData.errors[1]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[1].msg).to.be.equal('Por favor inclua um email válido')\r",
											"    })\r",
											"\r",
											"    it(\"Param should exists and be equal 'email'\", () => {\r",
											"        pm.expect(jsonData.errors[1]).to.have.property('param')\r",
											"        pm.expect(jsonData.errors[1].param).to.be.equal('email')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Por favor entre com uma senha de 6 caracteres ou mais'\", () => {\r",
											"        pm.expect(jsonData.errors[2]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[2].msg).to.be.equal('Por favor entre com uma senha de 6 caracteres ou mais')\r",
											"    })\r",
											"\r",
											"    it(\"Param should exists and be equal 'password'\", () => {\r",
											"        pm.expect(jsonData.errors[2]).to.have.property('param')\r",
											"        pm.expect(jsonData.errors[2].param).to.be.equal('password')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Install bdd",
			"item": [
				{
					"name": "install postman BDD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.setGlobalVariable('postmanBDD', responseBody);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://bigstickcarpet.com/postman-bdd/dist/postman-bdd.js",
							"protocol": "http",
							"host": [
								"bigstickcarpet",
								"com"
							],
							"path": [
								"postman-bdd",
								"dist",
								"postman-bdd.js"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "CTs success",
					"item": [
						{
							"name": "select perfil - user logado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"social\": {\r",
											"                \"youtube\": \"\",\r",
											"                \"twitter\": \"\",\r",
											"                \"facebook\": \"\",\r",
											"                \"linkedin\": \"\",\r",
											"                \"instagram\": \"\",\r",
											"                \"medium\": \"\"\r",
											"            },\r",
											"            \"skills\": [\r",
											"                \"ruby\"\r",
											"            ],\r",
											"            \"_id\": \"60e00baa0924fc0015057c28\",\r",
											"            \"user\": {\r",
											"                \"_id\": \"60e00b690924fc0015057c27\",\r",
											"                \"name\": \"Emanuele\",\r",
											"                \"avatar\": \"//www.gravatar.com/avatar/aa30e36926c92c8dfec3fad79a4b2f3c?s=200&r=pg&d=mm\"\r",
											"            },\r",
											"            \"status\": \"teste\",\r",
											"            \"experience\": [],\r",
											"            \"education\": [],\r",
											"            \"date\": \"2021-07-03T07:03:06.449Z\",\r",
											"            \"__v\": 0\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"social\",\r",
											"        \"skills\",\r",
											"        \"_id\",\r",
											"        \"user\",\r",
											"        \"status\",\r",
											"        \"experience\",\r",
											"        \"education\",\r",
											"        \"date\",\r",
											"        \"__v\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"social\": {\r",
											"            \"$id\": \"#/properties/social\",\r",
											"            \"type\": \"object\",\r",
											"            \"title\": \"The social schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": {},\r",
											"            \"examples\": [\r",
											"                {\r",
											"                    \"youtube\": \"\",\r",
											"                    \"twitter\": \"\",\r",
											"                    \"facebook\": \"\",\r",
											"                    \"linkedin\": \"\",\r",
											"                    \"instagram\": \"\",\r",
											"                    \"medium\": \"\"\r",
											"                }\r",
											"            ],\r",
											"            \"required\": [\r",
											"                \"youtube\",\r",
											"                \"twitter\",\r",
											"                \"facebook\",\r",
											"                \"linkedin\",\r",
											"                \"instagram\",\r",
											"                \"medium\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"youtube\": {\r",
											"                    \"$id\": \"#/properties/social/properties/youtube\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The youtube schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"twitter\": {\r",
											"                    \"$id\": \"#/properties/social/properties/twitter\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The twitter schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"facebook\": {\r",
											"                    \"$id\": \"#/properties/social/properties/facebook\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The facebook schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"linkedin\": {\r",
											"                    \"$id\": \"#/properties/social/properties/linkedin\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The linkedin schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"instagram\": {\r",
											"                    \"$id\": \"#/properties/social/properties/instagram\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The instagram schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"medium\": {\r",
											"                    \"$id\": \"#/properties/social/properties/medium\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The medium schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": true\r",
											"        },\r",
											"        \"skills\": {\r",
											"            \"$id\": \"#/properties/skills\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The skills schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    \"ruby\"\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/skills/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/skills/items/anyOf/0\",\r",
											"                        \"type\": \"string\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": \"\",\r",
											"                        \"examples\": [\r",
											"                            \"ruby\"\r",
											"                        ]\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        },\r",
											"        \"_id\": {\r",
											"            \"$id\": \"#/properties/_id\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The _id schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"60e00baa0924fc0015057c28\"\r",
											"            ]\r",
											"        },\r",
											"        \"user\": {\r",
											"            \"$id\": \"#/properties/user\",\r",
											"            \"type\": \"object\",\r",
											"            \"title\": \"The user schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": {},\r",
											"            \"examples\": [\r",
											"                {\r",
											"                    \"_id\": \"60e00b690924fc0015057c27\",\r",
											"                    \"name\": \"Emanuele\",\r",
											"                    \"avatar\": \"//www.gravatar.com/avatar/aa30e36926c92c8dfec3fad79a4b2f3c?s=200&r=pg&d=mm\"\r",
											"                }\r",
											"            ],\r",
											"            \"required\": [\r",
											"                \"_id\",\r",
											"                \"name\",\r",
											"                \"avatar\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"_id\": {\r",
											"                    \"$id\": \"#/properties/user/properties/_id\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The _id schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"60e00b690924fc0015057c27\"\r",
											"                    ]\r",
											"                },\r",
											"                \"name\": {\r",
											"                    \"$id\": \"#/properties/user/properties/name\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The name schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"Emanuele\"\r",
											"                    ]\r",
											"                },\r",
											"                \"avatar\": {\r",
											"                    \"$id\": \"#/properties/user/properties/avatar\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The avatar schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"//www.gravatar.com/avatar/aa30e36926c92c8dfec3fad79a4b2f3c?s=200&r=pg&d=mm\"\r",
											"                    ]\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": true\r",
											"        },\r",
											"        \"status\": {\r",
											"            \"$id\": \"#/properties/status\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The status schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"teste\"\r",
											"            ]\r",
											"        },\r",
											"        \"experience\": {\r",
											"            \"$id\": \"#/properties/experience\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The experience schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                []\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/experience/items\"\r",
											"            }\r",
											"        },\r",
											"        \"education\": {\r",
											"            \"$id\": \"#/properties/education\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The education schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                []\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/education/items\"\r",
											"            }\r",
											"        },\r",
											"        \"date\": {\r",
											"            \"$id\": \"#/properties/date\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The date schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"2021-07-03T07:03:06.449Z\"\r",
											"            ]\r",
											"        },\r",
											"        \"__v\": {\r",
											"            \"$id\": \"#/properties/__v\",\r",
											"            \"type\": \"integer\",\r",
											"            \"title\": \"The __v schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": 0,\r",
											"            \"examples\": [\r",
											"                0\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Select perfil user logado', () => {\r",
											"\r",
											"    it(\"Status code should be '200 OK'\", () => {\r",
											"        response.should.have.status(200)\r",
											"        pm.response.to.have.status(\"OK\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.ok\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"    pm.environment.set(\"userId\", jsonData.user._id)\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "jwt",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/profile/me/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"profile",
										"me",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "criar perfil",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"social\": {\r",
											"                \"youtube\": \"\",\r",
											"                \"twitter\": \"\",\r",
											"                \"facebook\": \"\",\r",
											"                \"linkedin\": \"\",\r",
											"                \"instagram\": \"\",\r",
											"                \"medium\": \"\"\r",
											"            },\r",
											"            \"skills\": [\r",
											"                \"ruby\"\r",
											"            ],\r",
											"            \"_id\": \"60e00baa0924fc0015057c28\",\r",
											"            \"user\": \"60e00b690924fc0015057c27\",\r",
											"            \"status\": \"teste\",\r",
											"            \"experience\": [],\r",
											"            \"education\": [],\r",
											"            \"date\": \"2021-07-03T07:03:06.449Z\",\r",
											"            \"__v\": 0\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"social\",\r",
											"        \"skills\",\r",
											"        \"_id\",\r",
											"        \"user\",\r",
											"        \"status\",\r",
											"        \"experience\",\r",
											"        \"education\",\r",
											"        \"date\",\r",
											"        \"__v\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"social\": {\r",
											"            \"$id\": \"#/properties/social\",\r",
											"            \"type\": \"object\",\r",
											"            \"title\": \"The social schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": {},\r",
											"            \"examples\": [\r",
											"                {\r",
											"                    \"youtube\": \"\",\r",
											"                    \"twitter\": \"\",\r",
											"                    \"facebook\": \"\",\r",
											"                    \"linkedin\": \"\",\r",
											"                    \"instagram\": \"\",\r",
											"                    \"medium\": \"\"\r",
											"                }\r",
											"            ],\r",
											"            \"required\": [\r",
											"                \"youtube\",\r",
											"                \"twitter\",\r",
											"                \"facebook\",\r",
											"                \"linkedin\",\r",
											"                \"instagram\",\r",
											"                \"medium\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"youtube\": {\r",
											"                    \"$id\": \"#/properties/social/properties/youtube\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The youtube schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"twitter\": {\r",
											"                    \"$id\": \"#/properties/social/properties/twitter\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The twitter schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"facebook\": {\r",
											"                    \"$id\": \"#/properties/social/properties/facebook\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The facebook schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"linkedin\": {\r",
											"                    \"$id\": \"#/properties/social/properties/linkedin\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The linkedin schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"instagram\": {\r",
											"                    \"$id\": \"#/properties/social/properties/instagram\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The instagram schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"medium\": {\r",
											"                    \"$id\": \"#/properties/social/properties/medium\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The medium schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": true\r",
											"        },\r",
											"        \"skills\": {\r",
											"            \"$id\": \"#/properties/skills\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The skills schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    \"ruby\"\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/skills/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/skills/items/anyOf/0\",\r",
											"                        \"type\": \"string\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": \"\",\r",
											"                        \"examples\": [\r",
											"                            \"ruby\"\r",
											"                        ]\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        },\r",
											"        \"_id\": {\r",
											"            \"$id\": \"#/properties/_id\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The _id schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"60e00baa0924fc0015057c28\"\r",
											"            ]\r",
											"        },\r",
											"        \"user\": {\r",
											"            \"$id\": \"#/properties/user\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The user schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"60e00b690924fc0015057c27\"\r",
											"            ]\r",
											"        },\r",
											"        \"status\": {\r",
											"            \"$id\": \"#/properties/status\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The status schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"teste\"\r",
											"            ]\r",
											"        },\r",
											"        \"experience\": {\r",
											"            \"$id\": \"#/properties/experience\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The experience schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                []\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/experience/items\"\r",
											"            }\r",
											"        },\r",
											"        \"education\": {\r",
											"            \"$id\": \"#/properties/education\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The education schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                []\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/education/items\"\r",
											"            }\r",
											"        },\r",
											"        \"date\": {\r",
											"            \"$id\": \"#/properties/date\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The date schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"2021-07-03T07:03:06.449Z\"\r",
											"            ]\r",
											"        },\r",
											"        \"__v\": {\r",
											"            \"$id\": \"#/properties/__v\",\r",
											"            \"type\": \"integer\",\r",
											"            \"title\": \"The __v schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": 0,\r",
											"            \"examples\": [\r",
											"                0\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Criar perfil', () => {\r",
											"\r",
											"    it(\"Status code should be '201 Created'\", () => {\r",
											"        response.should.have.status(201)\r",
											"        pm.response.to.have.status(\"Created\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.nested\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"    pm.environment.set(\"userId\", jsonData.user)\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "jwt",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"looko\",\r\n  \"skills\": \"rubyasdsad\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/profile",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "atualizar perfil",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"social\": {\r",
											"                \"youtube\": \"\",\r",
											"                \"twitter\": \"\",\r",
											"                \"facebook\": \"\",\r",
											"                \"linkedin\": \"\",\r",
											"                \"instagram\": \"\",\r",
											"                \"medium\": \"\"\r",
											"            },\r",
											"            \"skills\": [\r",
											"                \"cypress\"\r",
											"            ],\r",
											"            \"_id\": \"60e00baa0924fc0015057c28\",\r",
											"            \"user\": \"60e00b690924fc0015057c27\",\r",
											"            \"status\": \"teste\",\r",
											"            \"experience\": [],\r",
											"            \"education\": [],\r",
											"            \"date\": \"2021-07-03T07:03:06.449Z\",\r",
											"            \"__v\": 0\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"social\",\r",
											"        \"skills\",\r",
											"        \"_id\",\r",
											"        \"user\",\r",
											"        \"status\",\r",
											"        \"experience\",\r",
											"        \"education\",\r",
											"        \"date\",\r",
											"        \"__v\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"social\": {\r",
											"            \"$id\": \"#/properties/social\",\r",
											"            \"type\": \"object\",\r",
											"            \"title\": \"The social schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": {},\r",
											"            \"examples\": [\r",
											"                {\r",
											"                    \"youtube\": \"\",\r",
											"                    \"twitter\": \"\",\r",
											"                    \"facebook\": \"\",\r",
											"                    \"linkedin\": \"\",\r",
											"                    \"instagram\": \"\",\r",
											"                    \"medium\": \"\"\r",
											"                }\r",
											"            ],\r",
											"            \"required\": [\r",
											"                \"youtube\",\r",
											"                \"twitter\",\r",
											"                \"facebook\",\r",
											"                \"linkedin\",\r",
											"                \"instagram\",\r",
											"                \"medium\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"youtube\": {\r",
											"                    \"$id\": \"#/properties/social/properties/youtube\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The youtube schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"twitter\": {\r",
											"                    \"$id\": \"#/properties/social/properties/twitter\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The twitter schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"facebook\": {\r",
											"                    \"$id\": \"#/properties/social/properties/facebook\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The facebook schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"linkedin\": {\r",
											"                    \"$id\": \"#/properties/social/properties/linkedin\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The linkedin schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"instagram\": {\r",
											"                    \"$id\": \"#/properties/social/properties/instagram\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The instagram schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"medium\": {\r",
											"                    \"$id\": \"#/properties/social/properties/medium\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The medium schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": true\r",
											"        },\r",
											"        \"skills\": {\r",
											"            \"$id\": \"#/properties/skills\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The skills schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    \"cypress\"\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/skills/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/skills/items/anyOf/0\",\r",
											"                        \"type\": \"string\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": \"\",\r",
											"                        \"examples\": [\r",
											"                            \"cypress\"\r",
											"                        ]\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        },\r",
											"        \"_id\": {\r",
											"            \"$id\": \"#/properties/_id\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The _id schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"60e00baa0924fc0015057c28\"\r",
											"            ]\r",
											"        },\r",
											"        \"user\": {\r",
											"            \"$id\": \"#/properties/user\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The user schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"60e00b690924fc0015057c27\"\r",
											"            ]\r",
											"        },\r",
											"        \"status\": {\r",
											"            \"$id\": \"#/properties/status\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The status schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"teste\"\r",
											"            ]\r",
											"        },\r",
											"        \"experience\": {\r",
											"            \"$id\": \"#/properties/experience\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The experience schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                []\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/experience/items\"\r",
											"            }\r",
											"        },\r",
											"        \"education\": {\r",
											"            \"$id\": \"#/properties/education\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The education schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                []\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/education/items\"\r",
											"            }\r",
											"        },\r",
											"        \"date\": {\r",
											"            \"$id\": \"#/properties/date\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The date schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"2021-07-03T07:03:06.449Z\"\r",
											"            ]\r",
											"        },\r",
											"        \"__v\": {\r",
											"            \"$id\": \"#/properties/__v\",\r",
											"            \"type\": \"integer\",\r",
											"            \"title\": \"The __v schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": 0,\r",
											"            \"examples\": [\r",
											"                0\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Atualizar perfil', () => {\r",
											"\r",
											"    it(\"Status code should be '200 OK'\", () => {\r",
											"        response.should.have.status(200)\r",
											"        pm.response.to.have.status(\"OK\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.ok\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "jwt",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"teste\",\r\n  \"skills\": \"cypress\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/profile",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "deletar conta user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"msg\": \"Usuário removido\"\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"msg\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"msg\": {\r",
											"            \"$id\": \"#/properties/msg\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The msg schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"Usuário removido\"\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Deletar conta user', () => {\r",
											"\r",
											"    it(\"Status code should be '200 OK'\", () => {\r",
											"        response.should.have.status(200)\r",
											"        pm.response.to.have.status(\"OK\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.ok\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Usuário removido'\", () => {\r",
											"        pm.expect(jsonData).to.have.property('msg')\r",
											"        pm.expect(jsonData.msg).to.be.equal('Usuário removido')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "jwt",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/profile",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "perfil por Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"social\": {\r",
											"                \"youtube\": \"\",\r",
											"                \"twitter\": \"\",\r",
											"                \"facebook\": \"\",\r",
											"                \"linkedin\": \"\",\r",
											"                \"instagram\": \"\",\r",
											"                \"medium\": \"\"\r",
											"            },\r",
											"            \"skills\": [\r",
											"                \"ruby\"\r",
											"            ],\r",
											"            \"_id\": \"60e00baa0924fc0015057c28\",\r",
											"            \"user\": {\r",
											"                \"_id\": \"60e00b690924fc0015057c27\",\r",
											"                \"name\": \"Emanuele\",\r",
											"                \"avatar\": \"//www.gravatar.com/avatar/aa30e36926c92c8dfec3fad79a4b2f3c?s=200&r=pg&d=mm\"\r",
											"            },\r",
											"            \"status\": \"teste\",\r",
											"            \"experience\": [],\r",
											"            \"education\": [],\r",
											"            \"date\": \"2021-07-03T07:03:06.449Z\",\r",
											"            \"__v\": 0\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"social\",\r",
											"        \"skills\",\r",
											"        \"_id\",\r",
											"        \"user\",\r",
											"        \"status\",\r",
											"        \"experience\",\r",
											"        \"education\",\r",
											"        \"date\",\r",
											"        \"__v\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"social\": {\r",
											"            \"$id\": \"#/properties/social\",\r",
											"            \"type\": \"object\",\r",
											"            \"title\": \"The social schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": {},\r",
											"            \"examples\": [\r",
											"                {\r",
											"                    \"youtube\": \"\",\r",
											"                    \"twitter\": \"\",\r",
											"                    \"facebook\": \"\",\r",
											"                    \"linkedin\": \"\",\r",
											"                    \"instagram\": \"\",\r",
											"                    \"medium\": \"\"\r",
											"                }\r",
											"            ],\r",
											"            \"required\": [\r",
											"                \"youtube\",\r",
											"                \"twitter\",\r",
											"                \"facebook\",\r",
											"                \"linkedin\",\r",
											"                \"instagram\",\r",
											"                \"medium\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"youtube\": {\r",
											"                    \"$id\": \"#/properties/social/properties/youtube\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The youtube schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"twitter\": {\r",
											"                    \"$id\": \"#/properties/social/properties/twitter\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The twitter schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"facebook\": {\r",
											"                    \"$id\": \"#/properties/social/properties/facebook\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The facebook schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"linkedin\": {\r",
											"                    \"$id\": \"#/properties/social/properties/linkedin\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The linkedin schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"instagram\": {\r",
											"                    \"$id\": \"#/properties/social/properties/instagram\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The instagram schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"medium\": {\r",
											"                    \"$id\": \"#/properties/social/properties/medium\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The medium schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": true\r",
											"        },\r",
											"        \"skills\": {\r",
											"            \"$id\": \"#/properties/skills\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The skills schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    \"ruby\"\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/skills/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/skills/items/anyOf/0\",\r",
											"                        \"type\": \"string\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": \"\",\r",
											"                        \"examples\": [\r",
											"                            \"ruby\"\r",
											"                        ]\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        },\r",
											"        \"_id\": {\r",
											"            \"$id\": \"#/properties/_id\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The _id schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"60e00baa0924fc0015057c28\"\r",
											"            ]\r",
											"        },\r",
											"        \"user\": {\r",
											"            \"$id\": \"#/properties/user\",\r",
											"            \"type\": \"object\",\r",
											"            \"title\": \"The user schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": {},\r",
											"            \"examples\": [\r",
											"                {\r",
											"                    \"_id\": \"60e00b690924fc0015057c27\",\r",
											"                    \"name\": \"Emanuele\",\r",
											"                    \"avatar\": \"//www.gravatar.com/avatar/aa30e36926c92c8dfec3fad79a4b2f3c?s=200&r=pg&d=mm\"\r",
											"                }\r",
											"            ],\r",
											"            \"required\": [\r",
											"                \"_id\",\r",
											"                \"name\",\r",
											"                \"avatar\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"_id\": {\r",
											"                    \"$id\": \"#/properties/user/properties/_id\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The _id schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"60e00b690924fc0015057c27\"\r",
											"                    ]\r",
											"                },\r",
											"                \"name\": {\r",
											"                    \"$id\": \"#/properties/user/properties/name\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The name schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"Emanuele\"\r",
											"                    ]\r",
											"                },\r",
											"                \"avatar\": {\r",
											"                    \"$id\": \"#/properties/user/properties/avatar\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The avatar schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"//www.gravatar.com/avatar/aa30e36926c92c8dfec3fad79a4b2f3c?s=200&r=pg&d=mm\"\r",
											"                    ]\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": true\r",
											"        },\r",
											"        \"status\": {\r",
											"            \"$id\": \"#/properties/status\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The status schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"teste\"\r",
											"            ]\r",
											"        },\r",
											"        \"experience\": {\r",
											"            \"$id\": \"#/properties/experience\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The experience schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                []\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/experience/items\"\r",
											"            }\r",
											"        },\r",
											"        \"education\": {\r",
											"            \"$id\": \"#/properties/education\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The education schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                []\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/education/items\"\r",
											"            }\r",
											"        },\r",
											"        \"date\": {\r",
											"            \"$id\": \"#/properties/date\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The date schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"2021-07-03T07:03:06.449Z\"\r",
											"            ]\r",
											"        },\r",
											"        \"__v\": {\r",
											"            \"$id\": \"#/properties/__v\",\r",
											"            \"type\": \"integer\",\r",
											"            \"title\": \"The __v schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": 0,\r",
											"            \"examples\": [\r",
											"                0\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Select perfil por Id', () => {\r",
											"\r",
											"    it(\"Status code should be '200 OK'\", () => {\r",
											"        response.should.have.status(200)\r",
											"        pm.response.to.have.status(\"OK\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.ok\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/profile/user/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"profile",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "add experience",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"social\": {\r",
											"                \"youtube\": \"\",\r",
											"                \"twitter\": \"\",\r",
											"                \"facebook\": \"\",\r",
											"                \"linkedin\": \"\",\r",
											"                \"instagram\": \"\",\r",
											"                \"medium\": \"\"\r",
											"            },\r",
											"            \"skills\": [\r",
											"                \"ruby\"\r",
											"            ],\r",
											"            \"_id\": \"60e00baa0924fc0015057c28\",\r",
											"            \"user\": \"60e00b690924fc0015057c27\",\r",
											"            \"status\": \"teste\",\r",
											"            \"experience\": [],\r",
											"            \"education\": [],\r",
											"            \"date\": \"2021-07-03T07:03:06.449Z\",\r",
											"            \"__v\": 0\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"social\",\r",
											"        \"skills\",\r",
											"        \"_id\",\r",
											"        \"user\",\r",
											"        \"status\",\r",
											"        \"experience\",\r",
											"        \"education\",\r",
											"        \"date\",\r",
											"        \"__v\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"social\": {\r",
											"            \"$id\": \"#/properties/social\",\r",
											"            \"type\": \"object\",\r",
											"            \"title\": \"The social schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": {},\r",
											"            \"examples\": [\r",
											"                {\r",
											"                    \"youtube\": \"\",\r",
											"                    \"twitter\": \"\",\r",
											"                    \"facebook\": \"\",\r",
											"                    \"linkedin\": \"\",\r",
											"                    \"instagram\": \"\",\r",
											"                    \"medium\": \"\"\r",
											"                }\r",
											"            ],\r",
											"            \"required\": [\r",
											"                \"youtube\",\r",
											"                \"twitter\",\r",
											"                \"facebook\",\r",
											"                \"linkedin\",\r",
											"                \"instagram\",\r",
											"                \"medium\"\r",
											"            ],\r",
											"            \"properties\": {\r",
											"                \"youtube\": {\r",
											"                    \"$id\": \"#/properties/social/properties/youtube\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The youtube schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"twitter\": {\r",
											"                    \"$id\": \"#/properties/social/properties/twitter\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The twitter schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"facebook\": {\r",
											"                    \"$id\": \"#/properties/social/properties/facebook\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The facebook schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"linkedin\": {\r",
											"                    \"$id\": \"#/properties/social/properties/linkedin\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The linkedin schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"instagram\": {\r",
											"                    \"$id\": \"#/properties/social/properties/instagram\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The instagram schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                },\r",
											"                \"medium\": {\r",
											"                    \"$id\": \"#/properties/social/properties/medium\",\r",
											"                    \"type\": \"string\",\r",
											"                    \"title\": \"The medium schema\",\r",
											"                    \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                    \"default\": \"\",\r",
											"                    \"examples\": [\r",
											"                        \"\"\r",
											"                    ]\r",
											"                }\r",
											"            },\r",
											"            \"additionalProperties\": true\r",
											"        },\r",
											"        \"skills\": {\r",
											"            \"$id\": \"#/properties/skills\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The skills schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    \"ruby\"\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/skills/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/skills/items/anyOf/0\",\r",
											"                        \"type\": \"string\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": \"\",\r",
											"                        \"examples\": [\r",
											"                            \"ruby\"\r",
											"                        ]\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        },\r",
											"        \"_id\": {\r",
											"            \"$id\": \"#/properties/_id\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The _id schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"60e00baa0924fc0015057c28\"\r",
											"            ]\r",
											"        },\r",
											"        \"user\": {\r",
											"            \"$id\": \"#/properties/user\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The user schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"60e00b690924fc0015057c27\"\r",
											"            ]\r",
											"        },\r",
											"        \"status\": {\r",
											"            \"$id\": \"#/properties/status\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The status schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"teste\"\r",
											"            ]\r",
											"        },\r",
											"        \"experience\": {\r",
											"            \"$id\": \"#/properties/experience\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The experience schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                []\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/experience/items\"\r",
											"            }\r",
											"        },\r",
											"        \"education\": {\r",
											"            \"$id\": \"#/properties/education\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The education schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                []\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/education/items\"\r",
											"            }\r",
											"        },\r",
											"        \"date\": {\r",
											"            \"$id\": \"#/properties/date\",\r",
											"            \"type\": \"string\",\r",
											"            \"title\": \"The date schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": \"\",\r",
											"            \"examples\": [\r",
											"                \"2021-07-03T07:03:06.449Z\"\r",
											"            ]\r",
											"        },\r",
											"        \"__v\": {\r",
											"            \"$id\": \"#/properties/__v\",\r",
											"            \"type\": \"integer\",\r",
											"            \"title\": \"The __v schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": 0,\r",
											"            \"examples\": [\r",
											"                0\r",
											"            ]\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Adicionar experiência', () => {\r",
											"\r",
											"    it(\"Status code should be '200 OK'\", () => {\r",
											"        response.should.have.status(200)\r",
											"        pm.response.to.have.status(\"OK\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.ok\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"    pm.environment.set(\"expId\", jsonData.experience[0]._id)\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "jwt",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"tesdsfdsfte\",\r\n  \"company\": \"saassa\",\r\n  \"location\": \"string\",\r\n  \"from\": \"2021-07-03\",\r\n  \"to\": \"2021-07-03\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/profile/experience",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"profile",
										"experience"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete experience",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Experiência não encontrada\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Experiência não encontrada\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Experiência não encontrada\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Experiência não encontrada\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Adicionar experiência', () => {\r",
											"\r",
											"    it(\"Status code should be '200 OK'\", () => {\r",
											"        response.should.have.status(200)\r",
											"        pm.response.to.have.status(\"OK\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.ok\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "jwt",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"teste\",\r\n  \"company\": \"saassa\",\r\n  \"location\": \"string\",\r\n  \"from\": \"2021-07-03\",\r\n  \"to\": \"2021-07-03\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/profile/experience/60e0133b0924fc0015057c35",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"profile",
										"experience",
										"60e0133b0924fc0015057c35"
									]
								}
							},
							"response": []
						},
						{
							"name": "select github repos",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/profile/github/manuletsgo",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"profile",
										"github",
										"manuletsgo"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "CTs exceptions",
					"item": [
						{
							"name": "invalid token - user logado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Token não existente, autorização negada\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Token não existente, autorização negada\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Token não existente, autorização negada\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Token não existente, autorização negada\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Invalid token - user logado', () => {\r",
											"\r",
											"    it(\"Status code should be '401 Unauthorized'\", () => {\r",
											"        response.should.have.status(401)\r",
											"        pm.response.to.have.status(\"Unauthorized\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.unauthorized\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Errors should exists and be an array\", () => {\r",
											"        pm.expect(jsonData).to.have.property('errors')\r",
											"        pm.expect(jsonData.errors).to.be.a('array')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Token não existente, autorização negada'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[0].msg).to.be.equal('Token não existente, autorização negada')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "jwt",
										"value": "{{token_invalid}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/profile/me",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"profile",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "não há perfil para esse user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Não há perfil para este usuário\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Não há perfil para este usuário\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Não há perfil para este usuário\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Não há perfil para este usuário\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - User sem perfil cadastrado', () => {\r",
											"\r",
											"    it(\"Status code should be '200 OK'\", () => {\r",
											"        response.should.have.status(200)\r",
											"        pm.response.to.have.status(\"OK\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.ok\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Errors should exists and be an array\", () => {\r",
											"        pm.expect(jsonData).to.have.property('errors')\r",
											"        pm.expect(jsonData.errors).to.be.a('array')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Não há perfil para este usuário'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[0].msg).to.be.equal('Não há perfil para este usuário')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "jwt",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/profile/me",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"profile",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "atualizar perfil - body vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Status é obrigatório\",\r",
											"                    \"param\": \"status\",\r",
											"                    \"location\": \"body\"\r",
											"                },\r",
											"                {\r",
											"                    \"msg\": \"Skills é obrigatória\",\r",
											"                    \"param\": \"skills\",\r",
											"                    \"location\": \"body\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Status é obrigatório\",\r",
											"                        \"param\": \"status\",\r",
											"                        \"location\": \"body\"\r",
											"                    },\r",
											"                    {\r",
											"                        \"msg\": \"Skills é obrigatória\",\r",
											"                        \"param\": \"skills\",\r",
											"                        \"location\": \"body\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Status é obrigatório\",\r",
											"                                \"param\": \"status\",\r",
											"                                \"location\": \"body\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\",\r",
											"                            \"param\",\r",
											"                            \"location\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Status é obrigatório\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"param\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/param\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The param schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"status\"\r",
											"                                ]\r",
											"                            },\r",
											"                            \"location\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/location\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The location schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"body\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Editar perfil - body vazio', () => {\r",
											"\r",
											"    it(\"Status code should be '400 Bad Request'\", () => {\r",
											"        response.should.have.status(400)\r",
											"        pm.response.to.have.status(\"Bad Request\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.badRequest\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Errors should exists and be an array\", () => {\r",
											"        pm.expect(jsonData).to.have.property('errors')\r",
											"        pm.expect(jsonData.errors).to.be.a('array')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Status é obrigatório'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[0].msg).to.be.equal('Status é obrigatório')\r",
											"    })\r",
											"\r",
											"    it(\"Param should exists and be equal 'status'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('param')\r",
											"        pm.expect(jsonData.errors[0].param).to.be.equal('status')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Skills é obrigatória'\", () => {\r",
											"        pm.expect(jsonData.errors[1]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[1].msg).to.be.equal('Skills é obrigatória')\r",
											"    })\r",
											"\r",
											"    it(\"Param should exists and be equal 'status'\", () => {\r",
											"        pm.expect(jsonData.errors[1]).to.have.property('param')\r",
											"        pm.expect(jsonData.errors[1].param).to.be.equal('skills')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "jwt",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/profile",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "token inexistente",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Token não existente, autorização negada\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Token não existente, autorização negada\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Token não existente, autorização negada\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Token não existente, autorização negada\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Invalid token', () => {\r",
											"\r",
											"    it(\"Status code should be '401 Unauthorized'\", () => {\r",
											"        response.should.have.status(401)\r",
											"        pm.response.to.have.status(\"Unauthorized\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.unauthorized\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Errors should exists and be an array\", () => {\r",
											"        pm.expect(jsonData).to.have.property('errors')\r",
											"        pm.expect(jsonData.errors).to.be.a('array')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Token não existente, autorização negada'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[0].msg).to.be.equal('Token não existente, autorização negada')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/profile",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "perfil por Id não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Perfil não encontrado\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Perfil não encontrado\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Perfil não encontrado\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Perfil não encontrado\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Perfil por Id -  não encontrado', () => {\r",
											"\r",
											"    it(\"Status code should be '404 Not Found'\", () => {\r",
											"        response.should.have.status(404)\r",
											"        pm.response.to.have.status(\"Not Found\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.notFound\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Errors should exists and be an array\", () => {\r",
											"        pm.expect(jsonData).to.have.property('errors')\r",
											"        pm.expect(jsonData.errors).to.be.a('array')\r",
											"    })\r",
											"\r",
											"    it(\"Msg should exists and be equal 'Perfil não encontrado'\", () => {\r",
											"        pm.expect(jsonData.errors[0]).to.have.property('msg')\r",
											"        pm.expect(jsonData.errors[0].msg).to.be.equal('Perfil não encontrado')\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "jwt",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/profile/user/{{userId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"profile",
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "experience não encontrada",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"eval(globals.postmanBDD)\r",
											"\r",
											"var jsonData = pm.response.json()\r",
											"\r",
											"var schema = {\r",
											"    \"$schema\": \"http://json-schema.org/draft-07/schema\",\r",
											"    \"$id\": \"http://example.com/example.json\",\r",
											"    \"type\": \"object\",\r",
											"    \"title\": \"The root schema\",\r",
											"    \"description\": \"The root schema comprises the entire JSON document.\",\r",
											"    \"default\": {},\r",
											"    \"examples\": [\r",
											"        {\r",
											"            \"errors\": [\r",
											"                {\r",
											"                    \"msg\": \"Experiência não encontrada\"\r",
											"                }\r",
											"            ]\r",
											"        }\r",
											"    ],\r",
											"    \"required\": [\r",
											"        \"errors\"\r",
											"    ],\r",
											"    \"properties\": {\r",
											"        \"errors\": {\r",
											"            \"$id\": \"#/properties/errors\",\r",
											"            \"type\": \"array\",\r",
											"            \"title\": \"The errors schema\",\r",
											"            \"description\": \"An explanation about the purpose of this instance.\",\r",
											"            \"default\": [],\r",
											"            \"examples\": [\r",
											"                [\r",
											"                    {\r",
											"                        \"msg\": \"Experiência não encontrada\"\r",
											"                    }\r",
											"                ]\r",
											"            ],\r",
											"            \"additionalItems\": true,\r",
											"            \"items\": {\r",
											"                \"$id\": \"#/properties/errors/items\",\r",
											"                \"anyOf\": [\r",
											"                    {\r",
											"                        \"$id\": \"#/properties/errors/items/anyOf/0\",\r",
											"                        \"type\": \"object\",\r",
											"                        \"title\": \"The first anyOf schema\",\r",
											"                        \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                        \"default\": {},\r",
											"                        \"examples\": [\r",
											"                            {\r",
											"                                \"msg\": \"Experiência não encontrada\"\r",
											"                            }\r",
											"                        ],\r",
											"                        \"required\": [\r",
											"                            \"msg\"\r",
											"                        ],\r",
											"                        \"properties\": {\r",
											"                            \"msg\": {\r",
											"                                \"$id\": \"#/properties/errors/items/anyOf/0/properties/msg\",\r",
											"                                \"type\": \"string\",\r",
											"                                \"title\": \"The msg schema\",\r",
											"                                \"description\": \"An explanation about the purpose of this instance.\",\r",
											"                                \"default\": \"\",\r",
											"                                \"examples\": [\r",
											"                                    \"Experiência não encontrada\"\r",
											"                                ]\r",
											"                            }\r",
											"                        },\r",
											"                        \"additionalProperties\": true\r",
											"                    }\r",
											"                ]\r",
											"            }\r",
											"        }\r",
											"    },\r",
											"    \"additionalProperties\": true\r",
											"}\r",
											"\r",
											"describe('CT - Experiência não encontrada', () => {\r",
											"\r",
											"    it(\"Status code should be '404 Not Found'\", () => {\r",
											"        response.should.have.status(404)\r",
											"        pm.response.to.have.status(\"Not Found\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be an object\", () => {\r",
											"        pm.expect(jsonData).to.be.an(\"object\")\r",
											"    })\r",
											"\r",
											"    it(\"Response should be valid and have a body\", () => {\r",
											"        pm.response.to.be.notFound\r",
											"        pm.response.to.be.withBody\r",
											"    })\r",
											"\r",
											"    it('Schema should be valid', () => {\r",
											"        pm.expect(tv4.validate(jsonData, schema)).to.be.true\r",
											"    })\r",
											"\r",
											"    it(\"Content-Type header should be application/json\", () => {\r",
											"        pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8')\r",
											"    })\r",
											"\r",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "jwt",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"title\": \"teste\",\r\n  \"company\": \"saassa\",\r\n  \"location\": \"string\",\r\n  \"from\": \"2021-07-03\",\r\n  \"to\": \"2021-07-03\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/profile/experience/60e0133b0924fc0015057c35",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"profile",
										"experience",
										"60e0133b0924fc0015057c35"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}